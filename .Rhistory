j
i
for (i in length(BED.data$chrom)){
for (j in length(BED.data$chrom)){
if(j<i){
print(j)
print(i)
circos.link(sector.index1=BED.data$chrom[i], point1=c(BED.data$txStart[i],BED.data$txEnd[i]),
sector.index2=BED.data$chrom[j], point2=c(BED.data$txStart[j],BED.data$txEnd[j]),
1, h=0.3, col = "black", lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
for (i in 1:length(BED.data$chrom)){
for (j in 1:length(BED.data$chrom)){
if(j<i){
print(j)
print(i)
circos.link(sector.index1=BED.data$chrom[i], point1=c(BED.data$txStart[i],BED.data$txEnd[i]),
sector.index2=BED.data$chrom[j], point2=c(BED.data$txStart[j],BED.data$txEnd[j]),
1, h=0.3, col = "black", lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
for (i in 1:length(BED.data$chrom)){
for (j in 1:length(BED.data$chrom)){
if(j<i){
print(j)
print(i)
circos.link(sector.index1=BED.data$chrom[i], point1=c(BED.data$txStart[i],BED.data$txEnd[i]),
sector.index2=BED.data$chrom[j], point2=c(BED.data$txStart[j],BED.data$txEnd[j]),
1, h=2, col = "yellow", lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
for (i in 1:length(BED.data$chrom)){
for (j in 1:length(BED.data$chrom)){
if(j<i){
print(j)
print(i)
circos.link(sector.index1=BED.data$chrom[i], point1=c(BED.data$txStart[i],BED.data$txEnd[i]),
sector.index2=BED.data$chrom[j], point2=c(BED.data$txStart[j],BED.data$txEnd[j]),
1, h=5, col = "yellow", lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
for (i in 1:length(BED.data$chrom)){
for (j in 1:length(BED.data$chrom)){
if(j<i){
print(j)
print(i)
circos.link(sector.index1=BED.data$chrom[i], point1=c(BED.data$txStart[i],BED.data$txEnd[i]),
sector.index2=BED.data$chrom[j], point2=c(BED.data$txStart[j],BED.data$txEnd[j]),
h=2, col = "yellow", lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
for (i in 1:length(BED.data$chrom)){
for (j in 1:length(BED.data$chrom)){
if(j<i){
print(j)
print(i)
circos.link(sector.index1=BED.data$chrom[i], point1=c(BED.data$txStart[i],BED.data$txEnd[i]),
sector.index2=BED.data$chrom[j], point2=c(BED.data$txStart[j],BED.data$txEnd[j]),
h=2, col = "red", lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
for (i in 1:length(BED.data$chrom)){
for (j in 1:length(BED.data$chrom)){
if(j<i){
print(j)
print(i)
circos.link(sector.index1=BED.data$chrom[i], point1=c(BED.data$txStart[i],BED.data$txEnd[i]),
sector.index2=BED.data$chrom[j], point2=c(BED.data$txStart[j],BED.data$txEnd[j]),
col = "red", lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
par(mar = c(1, 1, 1, 1))
# reference: http://zuguang.de/circlize_book/book/initialize-genomic-plot.html#initialize-cytoband
circos.clear()
circos.par(cell.padding = c(0, 0, 0, 0))
circos.initializeWithIdeogram(species = mySpecies, chromosome.index = paste0("chr", c(1:22, "X", "Y")))
for (i in 1:length(BED.data$chrom)){
for (j in 1:length(BED.data$chrom)){
if(j<i){
circos.link(sector.index1=BED.data$chrom[i], point1=c(BED.data$txStart[i],BED.data$txEnd[i]),
sector.index2=BED.data$chrom[j], point2=c(BED.data$txStart[j],BED.data$txEnd[j]),
col = "red")#, lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
for (i in 1:length(BED.data$chrom)){
for (j in 1:length(BED.data$chrom)){
if(j<i){
circos.link(sector.index1=BED.data$chrom[i], point1=c(BED.data$txStart[i],BED.data$txEnd[i]),
sector.index2=BED.data$chrom[j], point2=c(BED.data$txStart[j],BED.data$txEnd[j]),
col = "cadetblue1")
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
shiny::runApp('Desktop/iGenomicsR/iGenomicsR')
runApp('Desktop/iGenomicsR/iGenomicsR_v2')
shiny::runApp('Desktop/iGenomicsR/iGenomicsR_v2')
shiny::runApp('Desktop/iGenomicsR/iGenomicsR')
runApp('Desktop/iGenomicsR/iGenomicsR_v2')
shiny::runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
shiny::runApp('Desktop/TSUNAMI/shiny')
shiny::runApp('Desktop/iGenomicsR/iGenomicsR')
shiny::runApp('Desktop/TSUNAMI/shiny')
library(shinyWidgets)
R
version
version
version
library(shinyWidgets)
shiny::runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
load("/Users/zhi/Desktop/datafinal.Rdata")
data_final[,1]
options(stringAsFactors = FALSE)
data_final[,1]
drop.levels(data_final[,1])
droplevels(data_final[,1])
genes_str = data_final[,1]
genes_str
genes_str2 <- unlist(strsplit(genes_str, " /// "))
unlist(genes_str)
factor(genes_str)
library(gdata)
drop.levels(data_final[,1])
droplevels(genes_str)
factor(genes_str)
levels(genes_str)
levels(genes_str)
# save(data_final, file = "~/Desktop/datafinal.Rdata")
genes_str <- levels(data_final[,1])
genes_str <- unlist(strsplit(genes_str, " /// "))
genes_str
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
shiny::runApp('Desktop/TSUNAMI/shiny')
load("/Users/zhi/Desktop/finalSymChar.Rdata")
load("/Users/zhi/Desktop/finalSym.Rdata")
load("/Users/zhi/Desktop/finalExp.Rdata")
dim(finalExp)
length(finalSym)
finalPValue <- matrix(0, ncol = 0, nrow = length(finalSym))
finalPValue
data_temp = as.matrix(readLines("~/Downloads/TASK1/185.xlsx"), sep = '\n')
data_temp <- read.xlsx("~/Downloads/TASK1/185.xlsx", sheet = 1, startRow = 1, colNames = TRUE)
if(data_temp[dim(data_temp)[1],1] == "!series_matrix_table_end"){
print("remove last row with \"!series_matrix_table_end\" ")
data_temp = data_temp[-dim(data_temp)[1],]
}
# data_temp <- print.data.frame(data.frame(data_temp), quote=FALSE)
data <<- data_temp
data = data_temp
data[3,3:187]
length(data[3,3:187])
OS_IND=as.numeric(data[3,3:187])
OS=as.numeric(data[4,3:187])
OS
i= 1
rr = finalExp[i,]
rr_sorted_list = sort(rr, decreasing = FALSE, index.return=T)
rr_sorted_list
rr_sorted = rr_sorted_list$x
rr_sorted_idx = rr_sorted_list$ix
medianB <- rep(0, length(rr))
medianB
length(rr)/2
rr_sorted_idx
medianB[ rr_sorted_idx > length(rr)/2 ] = 1
medianB
rr
rr_sorted_idx
ceil(length(rr)/2)
ceiling(length(rr)/2)
ceiling(length(rr)/2):length(rr)
rr_sorted_idx[ceiling(length(rr)/2):length(rr)]
medianB[ rr_sorted_idx[ceiling(length(rr)/2):length(rr)] ] = 1
# print(OS_IND)
# print(OS)
# pvalue
for(i in 1:dim(finalExp)[1]){
rr = finalExp[i,]
rr_sorted_list = sort(rr, decreasing = FALSE, index.return=T)
rr_sorted = rr_sorted_list$x
rr_sorted_idx = rr_sorted_list$ix
medianB <- rep(0, length(rr))
medianB[ rr_sorted_idx[ceiling(length(rr)/2):length(rr)] ] = 1
ss <- survdiff(Surv(OS, OS_IND) ~ medianB)
finalPValue[i] <- 1-pchisq(ss$chisq, 1)
}
# print("final P value:")
# print(finalPValue)
finalPValue <- as.numeric(finalPValue)
finalPValue
length(finalPValue<0.05)
finalPValue<0.05
sum(finalPValue<0.05)
sum(finalPValue<=0.05)
medianB[ rr_sorted_idx[floor(length(rr)/2):length(rr)] ] = 1
ss <- survdiff(Surv(OS, OS_IND) ~ medianB)
finalPValue[i] <- 1-pchisq(ss$chisq, 1)
for(i in 1:dim(finalExp)[1]){
rr = finalExp[i,]
rr_sorted_list = sort(rr, decreasing = FALSE, index.return=T)
rr_sorted = rr_sorted_list$x
rr_sorted_idx = rr_sorted_list$ix
medianB <- rep(0, length(rr))
medianB[ rr_sorted_idx[round(length(rr)/2):length(rr)] ] = 1
ss <- survdiff(Surv(OS, OS_IND) ~ medianB)
finalPValue[i] <- 1-pchisq(ss$chisq, 1)
}
# print("final P value:")
# print(finalPValue)
finalPValue <- as.numeric(finalPValue)
sum(finalPValue<0.05)
library(shiny)
library(rsconnect)
library(plyr)
library(data.table)
library(genefilter)
library(Biobase)
library(lmQCM)
library(WGCNA)
library(GEOquery)
library(dplyr)
library(enrichR)
library(DT)
library(plotly)
library(openxlsx)
library(survival)
library(naturalsort)
library(shinyWidgets)
# circos plot
library(circlize)
?getGEO
gse <- getGEO('GSE10')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
workdir = "/Volumes/Samsung32GB 1/DrZhiHanResearch/singlecelldata/results/new results (10X_scRNA)/"
exprs.list = c("NS_084_Yoder/CB-ECFC_expr.csv",
"NS_084_Yoder/iPS-ECFC-2_expr.csv",
"NS_085_Yang/KO-6_expr.csv",
"NS_085_Yang/WT-5_expr.csv")
genes.list = c("NS_084_Yoder/CB-ECFC_genes.csv",
"NS_084_Yoder/iPS-ECFC-2_genes.csv",
"NS_085_Yang/KO-6_genes.csv",
"NS_085_Yang/WT-5_genes.csv")
i = 1
expr = read.csv(file=paste(workdir, exprs.list[i], sep = ""), header=T, row.names = 1, sep=",")
gene = read.csv(file=paste(workdir, genes.list[i], sep = ""), header=T, sep=",")
i
install.packages("Seurat")
library(dplyr)
# 05/03/2018 Zhi Huang
library(Seurat)
install.packages()
install.packages("ddalpha")
# 05/03/2018 Zhi Huang
library(Seurat)
# 05/03/2018 Zhi Huang
library(Seurat)
install.packages("ddalpha")
library(ddalpha)
install.packages("ddalpha")
install.packages("ddalpha")
shiny::runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
shiny::runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
shiny::runApp('Desktop/TSUNAMI/shiny')
shiny::runApp('Desktop/TSUNAMI/shiny')
shiny::runApp('Desktop/CircosViewer')
install.packages("colourpicker")
runApp('Desktop/CircosViewer')
runApp('Desktop/CircosViewer')
data <- read.xlsx("~/Downloads/Circos\ data.xlsx", sheet = 1, startRow = 1, colNames = TRUE)
genes_str <- data[,2]
load("./data/UCSC_hg38_refGene_20180330.Rdata") # varname: hg38
setwd("~/Desktop/CircosViewer/")
load("./data/UCSC_hg38_refGene_20180330.Rdata") # varname: hg38
hg <- data.frame(cbind(rownames(hg38), hg38, hg38[6]-hg38[5]))
colnames(hg) = c("id","","name","chrom","strand","txStart","txEnd","cdsStart","cdsEnd","exonCount","exonStarts","exonEnds","proteinID","alignID","","","","length")
hg.ring <- hg[!grepl("_", hg$chrom),] # remove undefined chromosome
hg.ring <- hg.ring[!grepl("chrM", hg.ring$chrom),]
hg.matched <- hg.ring[match(genes_str, hg.ring$alignID, nomatch = 0), ]
hg.ring.lengthsum <- aggregate(hg.ring["length"],hg.ring["chrom"],sum)
factors_count = as.data.frame(hg.ring.lengthsum)
factors = factor(factors_count[,1], levels = factors_count[,1])
xlim = cbind(rep(0, dim(factors_count)[1]), factors_count[,2])
rownames(xlim) = factors_count[,1]
BED.data <- data.frame(hg.matched[,c(4,6:7,10,14)])
BED.data$txStart <- as.numeric(sub('.*\\:', '', data$Location ))
BED.data$Type <- data$Type
BED.data$Alteration <- data$Alteration
BED.data$Drug <- data$Drug
BED.data$Location <- data$Location
# BED.data$IDandDrug <- paste0(data$Gene, " (", data$Drug, ")")
BED.data$IDandDrug <- data$Gene
if(!is.null(BED.data$Drug)){
for(i in 1:dim(data)[1]){
if(is.na(data$Drug[i])){
BED.data$IDandDrug[i] <- data$Gene[i]
}
}
}
par(mar = c(plot.margin, plot.margin, plot.margin, plot.margin))
plot.margin = 1
par(mar = c(plot.margin, plot.margin, plot.margin, plot.margin))
circos.clear()
circos.par(cell.padding = c(0, 0, 0, 0))
# circos.initializeWithIdeogram(plotType = c("axis", "labels"))
circos.initializeWithIdeogram(plotType = NULL)
circos.genomicLabels(BED.data, labels.column = dim(BED.data)[2], side = "downward",
col = "black", line_col = "blue", cex = 0.5*font.scale) # genes and drugs
font.scale=1.2
circos.genomicLabels(BED.data, labels.column = dim(BED.data)[2], side = "downward",
col = "black", line_col = "blue", cex = 0.5*font.scale) # genes and drugs
circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
chr = CELL_META$sector.index
xlim = CELL_META$xlim
ylim = CELL_META$ylim
circos.rect(xlim[1], 0, xlim[2], 1, col = rand_color(1))
circos.text(mean(xlim), mean(ylim), chr, cex = 0.4*font.scale, col = "white", facing = "inside", niceFacing = TRUE)
}, track.height = 0.08, bg.border = NA)
BED.data.link = BED.data[BED.data$Type == "FUSION",]
for (i in 1:dim(BED.data.link)[1]){
location = gsub(" ", "", BED.data.link$Location[i], fixed = TRUE)
location = unlist(strsplit(location, "-"))
chrom1 = unlist(strsplit(location[1], ":"))[1]
pt1 = as.numeric(unlist(strsplit(location[1], ":")))[2]
chrom2 = unlist(strsplit(location[2], ":"))[1]
pt2 = as.numeric(unlist(strsplit(location[2], ":")))[2]
circos.link(sector.index1=paste("chr", chrom1, sep=""), point1=pt1,
sector.index2=paste("chr", chrom2, sep=""), point2=pt2,
col = line.color, lwd = line.width)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
colnames
i
location = gsub(" ", "", BED.data.link$Location[i], fixed = TRUE)
location = unlist(strsplit(location, "-"))
chrom1 = unlist(strsplit(location[1], ":"))[1]
pt1 = as.numeric(unlist(strsplit(location[1], ":")))[2]
chrom2 = unlist(strsplit(location[2], ":"))[1]
pt2 = as.numeric(unlist(strsplit(location[2], ":")))[2]
circos.link(sector.index1=paste("chr", chrom1, sep=""), point1=pt1,
sector.index2=paste("chr", chrom2, sep=""), point2=pt2,
col = line.color, lwd = line.width)
line.color
line.color = "red"
line.width =
1
circos.link(sector.index1=paste("chr", chrom1, sep=""), point1=pt1,
sector.index2=paste("chr", chrom2, sep=""), point2=pt2,
col = line.color, lwd = line.width)
sector.index1
chrom1
location
BED.data.link
BED.data.link
BED.data.link
dim(BED.data.link)
if(dim(BED.data.link)[1] == 0){ # no fusion
for (i in 1:dim(BED.data.link)[1]){
location = gsub(" ", "", BED.data.link$Location[i], fixed = TRUE)
location = unlist(strsplit(location, "-"))
chrom1 = unlist(strsplit(location[1], ":"))[1]
pt1 = as.numeric(unlist(strsplit(location[1], ":")))[2]
chrom2 = unlist(strsplit(location[2], ":"))[1]
pt2 = as.numeric(unlist(strsplit(location[2], ":")))[2]
circos.link(sector.index1=paste("chr", chrom1, sep=""), point1=pt1,
sector.index2=paste("chr", chrom2, sep=""), point2=pt2,
col = line.color, lwd = line.width)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
if(dim(BED.data.link)[1] == 0){ # no fusion
for (i in 1:dim(BED.data.link)[1]){
location = gsub(" ", "", BED.data.link$Location[i], fixed = TRUE)
location = unlist(strsplit(location, "-"))
chrom1 = unlist(strsplit(location[1], ":"))[1]
pt1 = as.numeric(unlist(strsplit(location[1], ":")))[2]
chrom2 = unlist(strsplit(location[2], ":"))[1]
pt2 = as.numeric(unlist(strsplit(location[2], ":")))[2]
circos.link(sector.index1=paste("chr", chrom1, sep=""), point1=pt1,
sector.index2=paste("chr", chrom2, sep=""), point2=pt2,
col = line.color, lwd = line.width)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
if(dim(BED.data.link)[1] != 0){ # no fusion
for (i in 1:dim(BED.data.link)[1]){
location = gsub(" ", "", BED.data.link$Location[i], fixed = TRUE)
location = unlist(strsplit(location, "-"))
chrom1 = unlist(strsplit(location[1], ":"))[1]
pt1 = as.numeric(unlist(strsplit(location[1], ":")))[2]
chrom2 = unlist(strsplit(location[2], ":"))[1]
pt2 = as.numeric(unlist(strsplit(location[2], ":")))[2]
circos.link(sector.index1=paste("chr", chrom1, sep=""), point1=pt1,
sector.index2=paste("chr", chrom2, sep=""), point2=pt2,
col = line.color, lwd = line.width)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
circos.genomicTrack(BED.data, track.height = 0.05, bg.border = NA,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
for(i in 1:dim(value)[1]){
current_value = value[i,]
current_region = region[i,]
if(current_value$Type == "CNA" & current_value$Alteration == "AMP"){
circos.genomicPoints(current_region, value = current_value, cex = symbol.size, pch = 8, col="darkgreen", ...)
}
else if(current_value$Type == "CNA" & current_value$Alteration == "HOMDEL"){
circos.genomicPoints(current_region, value = current_value, cex = symbol.size, pch = 8, col="red", ...)
}
else if(current_value$Type == "Inframe"){
circos.genomicPoints(current_region, value = current_value, cex = symbol.size, pch = 16, col="darkgreen", ...)
}
else if(current_value$Type == "Missense"){
circos.genomicPoints(current_region, value = current_value, cex = symbol.size, pch = 16, col="black", ...)
}
else if(current_value$Type == "Truncation"){
circos.genomicPoints(current_region, value = value[i,], cex = symbol.size, pch = 16, col="red", ...)
}
}
})
symbol.size
symbol.size = 1
circos.genomicTrack(BED.data, track.height = 0.05, bg.border = NA,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
for(i in 1:dim(value)[1]){
current_value = value[i,]
current_region = region[i,]
if(current_value$Type == "CNA" & current_value$Alteration == "AMP"){
circos.genomicPoints(current_region, value = current_value, cex = symbol.size, pch = 8, col="darkgreen", ...)
}
else if(current_value$Type == "CNA" & current_value$Alteration == "HOMDEL"){
circos.genomicPoints(current_region, value = current_value, cex = symbol.size, pch = 8, col="red", ...)
}
else if(current_value$Type == "Inframe"){
circos.genomicPoints(current_region, value = current_value, cex = symbol.size, pch = 16, col="darkgreen", ...)
}
else if(current_value$Type == "Missense"){
circos.genomicPoints(current_region, value = current_value, cex = symbol.size, pch = 16, col="black", ...)
}
else if(current_value$Type == "Truncation"){
circos.genomicPoints(current_region, value = value[i,], cex = symbol.size, pch = 16, col="red", ...)
}
}
})
circos.genomicTrack(BED.data, track.height = 0.05, bg.border = NA,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
for(i in 1:dim(value)[1]){
current_value = value[i,]
current_region = region[i,]
if(current_value$Type == "EXP mRNA" & current_value$Alteration == "UP"){
circos.genomicPoints(current_region, value = current_value, cex = symbol.size, pch = 24, col="darkgreen", ...)
}
else if(current_value$Type == "EXP mRNA" & current_value$Alteration == "DOWN"){
circos.genomicPoints(current_region, value = current_value, cex = symbol.size, pch = 25, col="red", ...)
}
}
})
circos.genomicTrack(BED.data, track.height = 0.05, bg.border = NA,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
for(i in 1:dim(value)[1]){
current_value = value[i,]
current_region = region[i,]
if(current_value$Type == "EXP Protein" & current_value$Alteration == "UP"){
circos.genomicPoints(current_region, value = current_value, cex = symbol.size, pch = 15, col="darkgreen", ...)
}
else if(current_value$Type == "EXP Protein" & current_value$Alteration == "DOWN"){
circos.genomicPoints(current_region, value = current_value, cex = symbol.size, pch = 14, col="red", ...)
}
}
})
